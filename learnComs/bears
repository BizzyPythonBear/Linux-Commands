#!/bin/bash

ARGS=1
VERSION="a1.0.0"
HOSTNAME=$(hostname)
RELEASE=$(cat /etc/issue)
MEMORY=$(grep MemTotal /proc/meminfo)

cpu_file="/proc/cpuinfo"
case $kernel_machine in
    "frv" | "hppa" | "m68k" | "openrisc" | "or"* | "powerpc" | "ppc"* | "sparc"*)
        cpu="$(awk -F':' '/^cpu\t|^CPU/ {printf $2; exit}' "$cpu_file")"
    ;;
    "s390"*)
        cpu="$(awk -F'=' '/machine/ {print $4; exit}' "$cpu_file")"
    ;;
    "ia64" | "m32r")
        cpu="$(awk -F':' '/model/ {print $2; exit}' "$cpu_file")"
        [[ -z "$cpu" ]] && cpu="$(awk -F':' '/family/ {printf $2; exit}' "$cpu_file")"
    ;;
    *)
        cpu="$(awk -F '\\s*: | @' \
                '/model name|Hardware|Processor|^cpu model|chip type|^cpu type/ {
                cpu=$2; if ($1 == "Hardware") exit } END { print cpu }' "$cpu_file")"
    ;;
esac

cpu="${cpu//(TM)}"
cpu="${cpu//(tm)}"
cpu="${cpu//(R)}"
cpu="${cpu//(r)}"
cpu="${cpu//CPU}"
cpu="${cpu//Processor}"
cpu="${cpu//Dual-Core}"
cpu="${cpu//Quad-Core}"
cpu="${cpu//Six-Core}"
cpu="${cpu//Eight-Core}"
cpu="${cpu//[1-9][0-9]-Core}"
cpu="${cpu//[0-9]-Core}"
cpu="${cpu//, * Compute Cores}"
cpu="${cpu//Core / }"
cpu="${cpu//(\"AuthenticAMD\"*)}"
cpu="${cpu//with Radeon * Graphics}"
cpu="${cpu//, altivec supported}"
cpu="${cpu//FPU*}"
cpu="${cpu//Chip Revision*}"
cpu="${cpu//Technologies, Inc}"
cpu="${cpu//Core2/Core 2}"

case $shell_path in
    on)  shell="$SHELL " ;;
    off) shell="${SHELL##*/} " ;;
esac
[[ $shell_version != on ]]
case ${shell_name:=${SHELL##*/}} in
    bash)
        [[ $BASH_VERSION ]] ||
            BASH_VERSION=$("$SHELL" -c "printf %s \"\$BASH_VERSION\"")
        shell+=${BASH_VERSION/-*}
    ;;
    sh|ash|dash|es) ;;
    *ksh)
        shell+=$("$SHELL" -c "printf %s \"\$KSH_VERSION\"")
        shell=${shell/ * KSH}
        shell=${shell/version}
    ;;
    osh)
        if [[ $OIL_VERSION ]]; then
            shell+=$OIL_VERSION
        else
            shell+=$("$SHELL" -c "printf %s \"\$OIL_VERSION\"")
        fi
    ;;
    tcsh)
        shell+=$("$SHELL" -c "printf %s \$tcsh")
    ;;
    yash)
        shell+=$("$SHELL" --version 2>&1)
        shell=${shell/ $shell_name}
        shell=${shell/ Yet another shell}
        shell=${shell/Copyright*}
    ;;
    *)
        shell+=$("$SHELL" --version 2>&1)
        shell=${shell/ $shell_name}
    ;;
esac

    # Remove unwanted info.
    shell=${shell/, version}
    shell=${shell/xonsh\//xonsh }
    shell=${shell/options*}
    shell=${shell/\(*\)}

noArgs() {
	printf "BEARS [-]: Invalid num of args.\n"
}

if [ $# -eq $ARGS ]
then
	if [ "$1" == "-h" ]; then
		echo """BEARS - (The Command)
Version: $VERSION
---------------------
HELP:
	-h: Commands
	-v: Version"""
	elif [ "$1" == "-v" ]; then
		echo """version: $VERSION
made by: Michael S.
github:  https://github.com/BizzyPythonBear/
BEARS (c) 2021-2022"""
	elif [ "$1" == "-stats" ]; then
		echo """os: 		$OSTYPE
hostname: 	$HOSTNAME
flavor: 	$RELEASE
$MEMORY
user: 		$USER
shell:		$SHELL $shell
cpu:		$cpu"""
	else
		printf "BEARS [-]: An Error has been encountered.\n"
		printf "BEARS [-]: The command '$1' does not exist.\n"
	fi
else
	noArgs
fi